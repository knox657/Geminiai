import logging
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
import requests

# Configure logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# Define your Gemini AI API endpoint and API key
GEMINI_API_URL = 'https://api.gemini-ai.com/v1/query'
GEMINI_API_KEY = 'your_gemini_api_key'

def start(update: Update, context: CallbackContext) -> None:
    """Send a message when the command /start is issued."""
    update.message.reply_text('Hi! I am your Gemini AI powered bot. How can I assist you today?')

def help_command(update: Update, context: CallbackContext) -> None:
    """Send a message when the command /help is issued."""
    update.message.reply_text('Type your query and I will provide an answer using Gemini AI.')

def query_gemini_ai(text: str) -> str:
    """Query the Gemini AI and return the response."""
    headers = {
        'Authorization': f'Bearer {GEMINI_API_KEY}',
        'Content-Type': 'application/json'
    }
    data = {
        'query': text
    }
    response = requests.post(GEMINI_API_URL, headers=headers, json=data)
    if response.status_code == 200:
        return response.json().get('response', 'Sorry, I could not understand that.')
    else:
        logger.error('Error querying Gemini AI: %s', response.text)
        return 'Error querying Gemini AI.'

def handle_message(update: Update, context: CallbackContext) -> None:
    """Handle incoming messages."""
    user_text = update.message.text
    logger.info("Received message: %s", user_text)
    
    # Query Gemini AI
    ai_response = query_gemini_ai(user_text)
    update.message.reply_text(ai_response)

def main() -> None:
    """Start the bot."""
    # Insert your Telegram Bot Token
    TELEGRAM_TOKEN = 'your_telegram_bot_token'
    
    updater = Updater(TELEGRAM_TOKEN)
    
    dispatcher = updater.dispatcher

    # Register handlers
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("help", help_command))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    # Start the Bot
    updater.start_polling()

    # Run the bot until you press Ctrl-C or the process receives SIGINT, SIGTERM or SIGABRT
    updater.idle()

if __name__ == '__main__':
    main()
